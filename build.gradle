ext.minSdkVersion = 21
ext.compileSdkVersion = 28
ext.buildToolsVersion = '28.0.3'

buildscript {
    apply from: 'gradle/dependencies.gradle'

    repositories {
        google()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$versions.gradle"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath "net.ltgt.gradle:gradle-errorprone-plugin:0.0.10"
        classpath "gradle.plugin.com.gladed.gradle.androidgitversion:gradle-android-git-version:0.4.0"
        classpath "com.selesse:gradle-git-changelog:0.3.0"
        classpath "de.mobilej.unmock:UnMockPlugin:0.6.4"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.7.2"
        classpath "android.arch.navigation:navigation-safe-args-gradle-plugin:1.0.0-beta02"
        classpath "com.google.android.gms:oss-licenses-plugin:0.9.4"
        classpath 'com.google.gms:google-services:4.2.0'
        classpath 'io.fabric.tools:gradle:1.27.1'

    }
}

apply plugin: 'com.selesse.git.changelog'

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def tag = new ByteArrayOutputStream().withStream { os ->
    def result = exec {
        executable = 'sh'
        args = ['-c', 'git describe --abbrev=0 --tags `git rev-list --tags --skip=1 --max-count=1`']
        standardOutput = os
        ignoreExitValue true
    }
    if (result.exitValue != 0) {
        return 'beginning'
    } else {
        return os.toString().trim()
    }
}

changelog {
    includeLines = {
        !it.contains("Merge")
    }
    markdown {
        commitFormat = '* %s (%aE)'
    }
    since = tag
}
generateChangelog.outputs.upToDateWhen { false }

static def isCI() {
    System.getenv("CI")
}